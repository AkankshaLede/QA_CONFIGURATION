# name: Code Correction

# on:
#   push:
#     branches:
#       - main

# jobs:
#   format_code:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.10"]
        
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2  # Ensure commit history
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install openai autopep8 flake8 pylint

#       - name: List files in workspace
#         run: ls -R
      
#       - name: Run comparison script
#         id: run_script
#         run: |
#           cd utils  # Move into utils directory
#           output=$(python check_cfg_params.py ../cfgfiles/file1.cfg ../cfgfiles/file2.cfg ../cfgfiles/expected.cfg)
#           echo "$output"
          
#           # Capture the 'Overall Execution flag' value
#           flag=$(echo "$output" | grep 'Overall Execution flag:' | awk '{print $4}')
#           if [[ "$flag" -eq 1 ]]; then
#             echo "Mismatch detected — failing PR."
#             exit 1
#           else
#             echo "No mismatches — PR is safe to merge."
#           fi

#       - name: Commit and push changes (if any)
#         if: success()
#         run: |
#           git config --global user.email "akankshalede@gmail.com"
#           git config --global user.name "AkankshaLede"
#           git diff --quiet || (git add . && git commit -m "Auto-corrected Python files" && sleep 10 && git push)



name: PR Check with Dynamic Arguments

on:
  pull_request:
    paths:
      - 'cfgfiles/**'  #  Trigger only if files in cfgfiles are changed
    types: [opened, synchronize, reopened]

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  #  Ensure commit history is available

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping dependency installation."
          fi

      #  Dynamically identify config files and default file
      - name: Find Config Files
        id: find-configs
        run: |
          # Get list of changed files in PR under cfgfiles/ folder
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '^cfgfiles/.*\.cfg$' || true)
          
          # Separate default file and input files
          DEFAULT_FILE=$(echo "$CHANGED_FILES" | grep -E "(default|expected)\.cfg" || echo "")
          INPUT_FILES=$(echo "$CHANGED_FILES" | grep -v "$DEFAULT_FILE" | tr '\n' ',')

          echo "Changed files: $CHANGED_FILES"
          echo "Default file: $DEFAULT_FILE"
          echo "Input files: $INPUT_FILES"

          # Set environment variables for later steps
          echo "INPUT_FILES=$INPUT_FILES" >> $GITHUB_ENV
          echo "DEFAULT_FILE=$DEFAULT_FILE" >> $GITHUB_ENV

      #  Run the script only if input files are found
      - name: Run Custom Python Script with Dynamic Arguments
        if: env.INPUT_FILES != '' && env.DEFAULT_FILE != ''
        run: |
          echo "Running script with input files: $INPUT_FILES and default file: $DEFAULT_FILE"
          python3 utils/check_cfg_params.py --input-files "$INPUT_FILES" --default-file "$DEFAULT_FILE"

      #  Fail the PR if mismatches are found
      - name: Check for Mismatch Flag
        if: failure()
        run: |
          echo "Mismatch detected — failing the PR."
          exit 1
